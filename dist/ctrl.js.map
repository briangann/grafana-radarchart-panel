{"version":3,"sources":["../src/ctrl.js"],"names":["getColorForValue","data","value","i","thresholds","length","colorMap","_","first","MetricsPanelCtrl","$","kbn","config","TimeSeries","d3","panelDefaults","fontSizes","fontTypes","unitFormats","getUnitFormats","operatorNameOptions","valueMaps","op","text","mappingTypes","name","rangeMaps","from","to","mappingType","colors","decimals","format","operatorName","radar","w","h","margin","top","right","bottom","left","levels","maxValue","labelFactor","wrapWidth","opacityArea","dotRadius","opacityCircles","strokeWidth","roundStrokes","D3RadarChartPanelCtrl","$scope","$injector","alertSrv","defaults","panel","radarDivId","id","containerDivId","scoperef","alertSrvRef","initialized","panelContainer","svgContainer","svg","panelWidth","panelHeight","radarObject","valueFormatted","valueRounded","series","events","on","onInitEditMode","bind","onDataReceived","onDataError","panels","grafanaBootData","settings","thisPanel","pluginId","thisPanelPath","baseUrl","optionsPath","addEditorTab","container","viewPortWidth","Math","max","document","documentElement","clientWidth","window","innerWidth","pixelsPerSpan","trueWidth","round","span","tmpPanelHeight","height","row","replace","actualHeight","parseInt","remove","setValues","panelTitleOffset","title","getPanelWidthBySpan","getPanelHeight","width","tmpradarRadius","parseFloat","radarRadius","select","append","attr","classed","opt","color","scale","category10","drawRadarChart","map","index","indexOf","splice","render","push","rangeMap","scope","elem","attrs","ctrl","radarByClass","find","childNodes","setContainer","renderRadar","renderingCompleted","isNumber","scaledDecimals","delta","dec","floor","log","LN10","magn","pow","norm","size","result","flotpairs","error","Error","message","JSON","stringify","lastPoint","last","datapoints","lastValue","isArray","alias","isString","escape","stats","decimalInfo","getDecimalsForValue","formatFunc","valueFormats","roundValue","scopedVars","__name","label","j","subItem","err","dataList","seriesHandler","updateRadar","seriesData","target","getFlotPairs","nullPointMode","tmp","templateUrl"],"mappings":"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","file":"ctrl.js","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport kbn from 'app/core/utils/kbn';\nimport config from 'app/core/config';\nimport TimeSeries from 'app/core/time_series2';\n//import * as d3 from '../bower_components/d3/d3.js';\nimport * as d3 from './external/d3.v3.min';\nimport './css/panel.css!';\nimport './external/d3radar';\n\nconst panelDefaults = {\n  fontSizes: [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70],\n  fontTypes: [\n    'Arial', 'Avant Garde', 'Bookman',\n    'Consolas', 'Courier', 'Courier New',\n    'Garamond', 'Helvetica', 'Open Sans',\n    'Palatino', 'Times', 'Times New Roman',\n    'Verdana'\n  ],\n  unitFormats: kbn.getUnitFormats(),\n  operatorNameOptions: ['min','max','avg', 'current', 'total', 'name'],\n  valueMaps: [\n    { value: 'null', op: '=', text: 'N/A' }\n  ],\n  mappingTypes: [\n    {name: 'value to text', value: 1},\n    {name: 'range to text', value: 2},\n  ],\n  rangeMaps: [\n    { from: 'null', to: 'null', text: 'N/A' }\n  ],\n  mappingType: 1,\n  thresholds: '',\n  colors: [\"rgba(245, 54, 54, 0.9)\", \"rgba(237, 129, 40, 0.89)\", \"rgba(50, 172, 45, 0.97)\"],\n  decimals: 2, // decimal precision\n  format: 'none', // unit format\n  operatorName: 'avg', // operator applied to time series\n  radar: {\n    w: 600,\t\t\t\t//Width of the circle\n    h: 600,\t\t\t\t//Height of the circle\n    margin: {top: 20, right: 20, bottom: 20, left: 20}, //The margins of the SVG\n    levels: 3,\t\t\t\t//How many levels or inner circles should be drawn\n    maxValue: 0, \t\t\t//What is the value that the biggest circle will represent\n    labelFactor: 1.25, \t//How much farther than the radius of the outer circle should the labels be placed\n    wrapWidth: 60, \t\t//The number of pixels after which a label needs to be given a new line\n    opacityArea: 0.35, \t//The opacity of the area of the blob\n    dotRadius: 4, \t\t\t//The size of the colored circles of each blog\n    opacityCircles: 0.1, \t//The opacity of the circles of each blob\n    strokeWidth: 2, \t\t//The width of the stroke around each blob\n    roundStrokes: false,\t//If true the area and stroke will follow a round path (cardinal-closed)\n  },\n};\n\nclass D3RadarChartPanelCtrl extends MetricsPanelCtrl {\n\n  constructor($scope, $injector, alertSrv) {\n    super($scope, $injector);\n    // merge existing settings with our defaults\n    _.defaults(this.panel, panelDefaults);\n    this.panel.radarDivId = 'd3radar_svg_' + this.panel.id;\n    this.containerDivId = 'container_'+this.panel.radarDivId;\n    this.scoperef = $scope;\n    this.alertSrvRef = alertSrv;\n    this.initialized = false;\n    this.panelContainer = null;\n    this.panel.svgContainer = null;\n    this.svg = null;\n    this.panelWidth = null;\n    this.panelHeight = null;\n    this.radarObject = null;\n    this.data = {\n      value: 0,\n      valueFormatted: 0,\n      valueRounded: 0\n    };\n    this.series = [];\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n  }\n\n  onInitEditMode() {\n    // determine the path to this plugin\n    var panels = grafanaBootData.settings.panels;\n    var thisPanel = panels[this.pluginId];\n    var thisPanelPath = thisPanel.baseUrl + '/';\n    // add the relative path to the partial\n    var optionsPath = thisPanelPath + 'partials/editor.options.html';\n    this.addEditorTab('Options', optionsPath, 2);\n  }\n\n  /**\n   * [setContainer description]\n   * @param {[type]} container [description]\n   */\n  setContainer(container) {\n    this.panelContainer = container;\n    this.panel.svgContainer = container;\n  }\n\n  // determine the width of a panel by the span and viewport\n  getPanelWidthBySpan() {\n    var viewPortWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    // get the pixels of a span\n    var pixelsPerSpan = viewPortWidth / 12;\n    // multiply num spans by pixelsPerSpan\n    var trueWidth = Math.round(this.panel.span * pixelsPerSpan);\n    return trueWidth;\n  }\n\n  getPanelHeight() {\n    // panel can have a fixed height via options\n    var tmpPanelHeight = this.panel.height;\n    // if that is blank, try to get it from our row\n    if (typeof tmpPanelHeight === 'undefined') {\n      // get from the row instead\n      tmpPanelHeight = this.row.height;\n      // default to 250px if that was undefined also\n      if (typeof tmpPanelHeight === 'undefined') {\n        tmpPanelHeight = 250;\n      }\n    }\n    else {\n      // convert to numeric value\n      tmpPanelHeight = tmpPanelHeight.replace(\"px\",\"\");\n    }\n    var actualHeight = parseInt(tmpPanelHeight);\n    return actualHeight;\n  }\n\n  clearSVG() {\n    if ($('#'+this.panel.radarDivId).length) {\n      //console.log(\"Clearing SVG id: \" + this.panel.radarDivId);\n      $('#'+this.panel.radarDivId).remove();\n    }\n  }\n\n  renderRadar() {\n    // update the values to be sent to the radar constructor\n    this.setValues(this.data);\n    //this.clearSVG();\n    //console.log(\"Looking for: #\"+this.panel.radarDivId);\n    if ($('#'+this.panel.radarDivId).length) {\n      //console.log(\"Clearing SVG id: \" + this.panel.radarDivId);\n      $('#'+this.panel.radarDivId).remove();\n    } else {\n      //console.log(\"not found...\");\n    }\n    // use jQuery to get the height on our container\n    // TODO: Check if there is a \"title\" and offset size of radar accordingly\n    var panelTitleOffset = 0;\n    if (this.panel.title !== \"\") {\n      panelTitleOffset = 25;\n    }\n    this.panelWidth = this.getPanelWidthBySpan();\n    this.panelHeight = this.getPanelHeight() - panelTitleOffset;\n    var margin = {top: 0, right: 0, bottom: 0, left: 10};\n    var width = this.panelWidth;\n    var height = this.panelHeight;\n\n    //console.log(\"Creating SVG id: \" + this.panel.radarDivId);\n\n    // check which is smaller, the height or the width and set the radius to be half of the lesser\n    var tmpradarRadius = parseFloat(this.panel.radar.radarRadius);\n    // autosize if radius is set to zero\n    if (this.panel.radar.radarRadius === 0) {\n      tmpradarRadius = this.panelHeight / 2;\n      if (this.panelWidth < this.panelHeight) {\n        tmpradarRadius = this.panelWidth / 2;\n      }\n      tmpradarRadius -= 10;\n    }\n\n    // set the width and height to be double the radius\n    var svg = d3.select(this.panel.svgContainer)\n      .append(\"svg\")\n      .attr(\"width\", Math.round(tmpradarRadius*2) + \"px\")\n      .attr(\"height\", Math.round(tmpradarRadius*2) + \"px\")\n      .attr(\"id\", this.panel.radarDivId)\n      .classed(\"svg-content-responsive\", true)\n      .append(\"g\");\n\n    var opt = {\n      w: this.panel.radar.w,\t\t\t\t//Width of the circle\n      h: this.panel.radar.h,\t\t\t\t//Height of the circle\n      margin: this.panel.radar.margin, //The margins of the SVG\n      levels: this.panel.radar.levels,\t\t\t\t//How many levels or inner circles should be drawn\n      maxValue: this.panel.radar.maxValue, \t\t\t//What is the value that the biggest circle will represent\n      labelFactor: this.panel.radar.labelFactor, \t//How much farther than the radius of the outer circle should the labels be placed\n      wrapWidth: this.panel.radar.wrapWidth, \t\t//The number of pixels after which a label needs to be given a new line\n      opacityArea: this.panel.radar.opacityArea, \t//The opacity of the area of the blob\n      dotRadius: this.panel.radar.dotRadius, \t\t\t//The size of the colored circles of each blog\n      opacityCircles: this.panel.radar.opacityCircles, \t//The opacity of the circles of each blob\n      strokeWidth: this.panel.radar.strokeWidth, \t\t//The width of the stroke around each blob\n      roundStrokes: this.panel.radar.roundStrokes,\t//If true the area and stroke will follow a round path (cardinal-closed)\n      color: d3.scale.category10()\t//Color function\n    };\n    this.radarObject = new drawRadarChart(svg,opt);\n    this.svg = svg;\n  }\n\n  removeValueMap(map) {\n    var index = _.indexOf(this.panel.valueMaps, map);\n    this.panel.valueMaps.splice(index, 1);\n    this.render();\n  }\n\n  addValueMap() {\n    this.panel.valueMaps.push({value: '', op: '=', text: '' });\n  }\n\n  removeRangeMap(rangeMap) {\n    var index = _.indexOf(this.panel.rangeMaps, rangeMap);\n    this.panel.rangeMaps.splice(index, 1);\n    this.render();\n  }\n\n  addRangeMap() {\n    this.panel.rangeMaps.push({from: '', to: '', text: ''});\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    //console.log(\"d3radar inside link\");\n    var radarByClass = elem.find('.grafana-d3-radarchart');\n    //radarByClass.append('<center><div id=\"'+ctrl.containerDivId+'\"></div></center>');\n    radarByClass.append('<div id=\"'+ctrl.containerDivId+'\"></div>');\n    var container = radarByClass[0].childNodes[0];\n    ctrl.setContainer(container);\n    function render(){\n    \t\tctrl.renderRadar();\n    }\n    this.events.on('render', function() {\n\t\t\trender();\n\t\t\tctrl.renderingCompleted();\n\t  });\n  }\n\n\n  getDecimalsForValue(value) {\n    if (_.isNumber(this.panel.decimals)) {\n      return {decimals: this.panel.decimals, scaledDecimals: null};\n    }\n\n    var delta = value / 2;\n    var dec = -Math.floor(Math.log(delta) / Math.LN10);\n\n    var magn = Math.pow(10, -dec),\n        norm = delta / magn, // norm is between 1.0 and 10.0\n        size;\n\n    if (norm < 1.5) {\n      size = 1;\n    } else if (norm < 3) {\n      size = 2;\n      // special case for 2.5, requires an extra decimal\n      if (norm > 2.25) {\n        size = 2.5;\n        ++dec;\n      }\n    } else if (norm < 7.5) {\n      size = 5;\n    } else {\n      size = 10;\n    }\n\n    size *= magn;\n\n    // reduce starting decimals if not needed\n    if (Math.floor(value) === value) { dec = 0; }\n\n    var result = {};\n    result.decimals = Math.max(0, dec);\n    result.scaledDecimals = result.decimals - Math.floor(Math.log(size) / Math.LN10) + 2;\n    return result;\n  }\n\n  setValues(data) {\n    data.flotpairs = [];\n    if (this.series.length > 1) {\n      var error = new Error();\n      error.message = 'Multiple Series Error';\n      error.data = 'Metric query returns ' + this.series.length +\n        ' series. Single Stat Panel expects a single series.\\n\\nResponse:\\n'+JSON.stringify(this.series);\n      throw error;\n    }\n\n    if (this.series && this.series.length > 0) {\n      var lastPoint = _.last(this.series[0].datapoints);\n      var lastValue = _.isArray(lastPoint) ? lastPoint[0] : null;\n\n      if (this.panel.operatorName === 'name') {\n        data.value = 0;\n        data.valueRounded = 0;\n        data.valueFormatted = this.series[0].alias;\n      } else if (_.isString(lastValue)) {\n        data.value = 0;\n        data.valueFormatted = _.escape(lastValue);\n        data.valueRounded = 0;\n      } else {\n        data.value = this.series[0].stats[this.panel.operatorName];\n        data.flotpairs = this.series[0].flotpairs;\n        var decimalInfo = this.getDecimalsForValue(data.value);\n        var formatFunc = kbn.valueFormats[this.panel.format];\n        data.valueFormatted = formatFunc(data.value, decimalInfo.decimals, decimalInfo.scaledDecimals);\n        data.valueRounded = kbn.roundValue(data.value, decimalInfo.decimals);\n      }\n\n      // Add $__name variable for using in prefix or postfix\n      data.scopedVars = {\n        __name: {\n          value: this.series[0].label\n        }\n      };\n    }\n\n    // check value to text mappings if its enabled\n    if (this.panel.mappingType === 1) {\n      for (var i = 0; i < this.panel.valueMaps.length; i++) {\n        var map = this.panel.valueMaps[i];\n        // special null case\n        if (map.value === 'null') {\n          if (data.value === null || data.value === void 0) {\n            data.valueFormatted = map.text;\n            return;\n          }\n          continue;\n        }\n\n        // value/number to text mapping\n        var value = parseFloat(map.value);\n        if (value === data.valueRounded) {\n          data.valueFormatted = map.text;\n          return;\n        }\n      }\n    } else if (this.panel.mappingType === 2) {\n      for (var j = 0; j < this.panel.rangeMaps.length; j++) {\n        var rangeMap = this.panel.rangeMaps[j];\n        // special null case\n        if (rangeMap.from === 'null' && rangeMap.to === 'null') {\n          if (data.value === null || data.value === void 0) {\n            data.valueFormatted = rangeMap.text;\n            return;\n          }\n          continue;\n        }\n\n        // value/number to range mapping\n        var from = parseFloat(rangeMap.from);\n        var to = parseFloat(rangeMap.to);\n        if (to >= data.valueRounded && from <= data.valueRounded) {\n          data.valueFormatted = rangeMap.text;\n          return;\n        }\n      }\n    }\n\n    if (data.value === null || data.value === void 0) {\n      data.valueFormatted = \"no value\";\n    }\n  }\n\n  getValueText() {\n    return this.data.valueFormatted;\n  }\n\n  getValueRounded() {\n    return this.data.valueRounded;\n  }\n\n  setUnitFormat(subItem) {\n    this.panel.format = subItem.value;\n    this.render();\n  }\n\n  onDataError(err) {\n    this.onDataReceived([]);\n  }\n\n  onDataReceived(dataList) {\n    this.series = dataList.map(this.seriesHandler.bind(this));\n    var data = {};\n    this.setValues(data);\n    this.data = data;\n    if(this.radarObject !== null){\n      this.radarObject.updateRadar(data.value, data.valueFormatted, data.valueRounded);\n    } else {\n      // render radar\n      this.render();\n    }\n  }\n\n  seriesHandler(seriesData) {\n    var series = new TimeSeries({\n      datapoints: seriesData.datapoints,\n      alias: seriesData.target,\n    });\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n    return series;\n  }\n\n  invertColorOrder() {\n    var tmp = this.panel.colors[0];\n    this.panel.colors[0] = this.panel.colors[2];\n    this.panel.colors[2] = tmp;\n    this.render();\n  }\n}\n\nfunction getColorForValue(data, value) {\n  for (var i = data.thresholds.length; i > 0; i--) {\n    if (value >= data.thresholds[i-1]) {\n      return data.colorMap[i];\n    }\n  }\n  return _.first(data.colorMap);\n}\n\nD3RadarChartPanelCtrl.templateUrl = 'partials/template.html';\nexport {\n\tD3RadarChartPanelCtrl,\n\tD3RadarChartPanelCtrl as MetricsPanelCtrl\n};\n"]}